{
  "name": "mediawiki-title",
  "version": "0.3.1",
  "description": "Title normalization library for mediawiki",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha",
    "coverage": "istanbul cover _mocha -- -R spec",
    "coveralls": "cat ./coverage/lcov.info | coveralls"
  },
  "keywords": [
    "mediawiki",
    "normalization",
    "title",
    "article"
  ],
  "author": {
    "name": "Wikimedia Services Team",
    "email": "services@wikimedia.org"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://phabricator.wikimedia.org/tag/services/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wikimedia/mediawiki-title.git"
  },
  "devDependencies": {
    "coveralls": "^2.11.6",
    "istanbul": "^0.4.2",
    "mocha": "^2.3.4",
    "mocha-jscs": "^4.0.0",
    "mocha-jshint": "^2.2.6",
    "mocha-lcov-reporter": "^1.0.0",
    "preq": "^0.4.8"
  },
  "readme": "# mediawiki-title [![npm version](https://badge.fury.io/js/mediawiki-title.svg)](https://badge.fury.io/js/mediawiki-title) [![Build Status](https://travis-ci.org/wikimedia/mediawiki-title.svg?branch=master)](https://travis-ci.org/wikimedia/mediawiki-title) [![Coverage Status](https://coveralls.io/repos/github/wikimedia/mediawiki-title/badge.svg?branch=master)](https://coveralls.io/github/wikimedia/mediawiki-title?branch=master) [![Dependencies](https://david-dm.org/wikimedia/mediawiki-title.svg?branch=master)](https://david-dm.org/wikimedia/mediawiki-title?branch=master)\n\nMediawiki title normalizetion, that conforms to the normalization rules used in [MediaWiki Core](https://www.mediawiki.org/wiki/API:Query#Title_normalization).\nIn general, the page title is converted to the mediawiki DB key format by trimming spaces, replacing whitespace symbols to underscores\nand applying wiki-specific capitalizetion rules. The namespace name is converted to a localized canonical name.\n\n## Classes\n\n<dl>\n<dt><a href=\"#Namespace\">Namespace</a></dt>\n<dd></dd>\n<dt><a href=\"#Title\">Title</a></dt>\n<dd></dd>\n</dl>\n\n## Typedefs\n\n<dl>\n<dt><a href=\"#SiteInfo\">SiteInfo</a> : <code>Object</code></dt>\n<dd><p>Information about a wikimedia site required to make correct\nnormalization.</p>\n</dd>\n</dl>\n\n<a name=\"Namespace\"></a>\n## Namespace\n**Kind**: global class  \n\n* [Namespace](#Namespace)\n    * [new Namespace(id, siteInfo)](#new_Namespace_new)\n    * _instance_\n        * [.isSpecial()](#Namespace+isSpecial) ⇒ <code>boolean</code>\n        * [.isMain()](#Namespace+isMain) ⇒ <code>boolean</code>\n        * [.isTalk()](#Namespace+isTalk) ⇒ <code>boolean</code>\n        * [.isUser()](#Namespace+isUser) ⇒ <code>boolean</code>\n        * [.isUserTalk()](#Namespace+isUserTalk) ⇒ <code>boolean</code>\n        * [.getNormalizedText()](#Namespace+getNormalizedText) ⇒ <code>string</code>\n    * _static_\n        * [.fromText(text, siteInfo)](#Namespace.fromText) ⇒ <code>[Namespace](#Namespace)</code> &#124; <code>undefined</code>\n        * [.main(siteInfo)](#Namespace.main) ⇒ <code>[Namespace](#Namespace)</code>\n\n<a name=\"new_Namespace_new\"></a>\n### new Namespace(id, siteInfo)\nRepresents a wiki namespace\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | The namespace identifier |\n| siteInfo | <code>[SiteInfo](#SiteInfo)</code> | The site metadata information. |\n\n<a name=\"Namespace+isSpecial\"></a>\n### namespace.isSpecial() ⇒ <code>boolean</code>\nChecks whether namespace is `Special`.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace+isMain\"></a>\n### namespace.isMain() ⇒ <code>boolean</code>\nChecks whether namespace is `Main`.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace+isTalk\"></a>\n### namespace.isTalk() ⇒ <code>boolean</code>\nChecks whether namespace is `Talk`.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace+isUser\"></a>\n### namespace.isUser() ⇒ <code>boolean</code>\nChecks whether namespace is `User`.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace+isUserTalk\"></a>\n### namespace.isUserTalk() ⇒ <code>boolean</code>\nChecks whether namespace is `User_Talk`.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace+getNormalizedText\"></a>\n### namespace.getNormalizedText() ⇒ <code>string</code>\nGet the canonical name string for this namespace.\n\n**Kind**: instance method of <code>[Namespace](#Namespace)</code>  \n<a name=\"Namespace.fromText\"></a>\n### Namespace.fromText(text, siteInfo) ⇒ <code>[Namespace](#Namespace)</code> &#124; <code>undefined</code>\nCreates a namespace instance from namespace text or a namespace alias\n\n**Kind**: static method of <code>[Namespace](#Namespace)</code>  \n**Returns**: <code>[Namespace](#Namespace)</code> &#124; <code>undefined</code> - a namespace or undefined if it wasn't found.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>string</code> | Namespace name text. |\n| siteInfo | <code>[SiteInfo](#SiteInfo)</code> | the site information. |\n\n<a name=\"Namespace.main\"></a>\n### Namespace.main(siteInfo) ⇒ <code>[Namespace](#Namespace)</code>\nCreates a namespace object for a `Main` namespace.\n\n**Kind**: static method of <code>[Namespace](#Namespace)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| siteInfo | <code>[SiteInfo](#SiteInfo)</code> | the site information. |\n\n<a name=\"Title\"></a>\n## Title\n**Kind**: global class  \n\n* [Title](#Title)\n    * [new Title(key, namespace, siteInfo, [fragment])](#new_Title_new)\n    * _instance_\n        * [.getPrefixedDBKey()](#Title+getPrefixedDBKey) ⇒ <code>string</code>\n        * [.getNamespace()](#Title+getNamespace) ⇒ <code>[Namespace](#Namespace)</code>\n    * _static_\n        * [.newFromText(title, siteInfo)](#Title.newFromText) ⇒ <code>[Title](#Title)</code>\n\n<a name=\"new_Title_new\"></a>\n### new Title(key, namespace, siteInfo, [fragment])\nCreates a new title object with article the dbKey and namespace\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | The article title in a form of the dbKey. |\n| namespace | <code>[Namespace](#Namespace)</code> &#124; <code>number</code> | The article namespace. |\n| siteInfo | <code>[SiteInfo](#SiteInfo)</code> | The site metadata. |\n| [fragment] | <code>string</code> | The fragment of the title. |\n\n<a name=\"Title+getPrefixedDBKey\"></a>\n### title.getPrefixedDBKey() ⇒ <code>string</code>\nReturns the normalized article title and namespace.\n\n**Kind**: instance method of <code>[Title](#Title)</code>  \n<a name=\"Title+getNamespace\"></a>\n### title.getNamespace() ⇒ <code>[Namespace](#Namespace)</code>\nReturns the namespace of an article.\n\n**Kind**: instance method of <code>[Title](#Title)</code>  \n<a name=\"Title.newFromText\"></a>\n### Title.newFromText(title, siteInfo) ⇒ <code>[Title](#Title)</code>\nNormalize a title according to the rules of <domain>\n\n**Kind**: static method of <code>[Title](#Title)</code>  \n**Returns**: <code>[Title](#Title)</code> - The resulting title object.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| title | <code>string</code> | The page title to normalize. |\n| siteInfo | <code>[SiteInfo](#SiteInfo)</code> | The site information. |\n\n<a name=\"SiteInfo\"></a>\n## SiteInfo : <code>Object</code>\nInformation about a wikimedia site required to make correct\nnormalization.\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| lang | <code>string</code> | Site language code. |\n| legaltitlechars | <code>string</code> | A perl-like regex for characters allowed in the page title. |\n| case | <code>string</code> | Whether to capitalize the first letter of the title. Could be obtained from the `general` section of the `siteInfo` php API response. |\n| namespaces | <code>Object</code> | Site namespaces info in the same format as returned by PHP api. |\n| namespacealiases | <code>Object</code> | Site namespace aliases in the same format as returned by PHP api. |\n\n## Usage\n\nThe library returns a [Bluebird](bluebirdjs.com) promise of a normalized title. \nWiki-specific rules are fetched from the [api](en.wikipedia.org/w/api.php), and\ncached within the `Normalizer` instance, so reusing the instance is highly recommended.\n\n```javascript\nvar result = Title.fromPrefixedText('some_title', {\n\tlang: 'en',\n\tlegaltitlechars: \" %!\\\"$&'()*,\\\\-.\\\\/0-9:;=?@A-Z\\\\\\\\^_`a-z~\\\\x80-\\\\xFF+\",\n\tnamespaces: {\n\t\t\"0\": {\n\t\t\tid: 0,\n\t\t\tcase: \"first-letter\",\n\t\t\tcontent: \"\",\n\t\t\t\"*\": \"\"\n\t\t\t},\n\t\t}\n});\nconsole.log(result.getPrefixedDBKey());\n```\n\n## Bug reporting\n\nFor bug reporting please use [Phabricator](https://phabricator.wikimedia.org/tag/services/) ]\nand mark the bugs with `Servises` label or contuct directly in IRC in the [#wikimedia-services](http://webchat.freenode.net/?channels=wikimedia-services) channel.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "217d530a153e9de4e1e9d58ae2e6ca7e2676faa1",
  "homepage": "https://github.com/wikimedia/mediawiki-title#readme",
  "_id": "mediawiki-title@0.3.1",
  "_shasum": "0cb05674e28afa922fcd514e220c0df2f29546c1",
  "_from": "mediawiki-title@>=0.3.0 <0.4.0"
}
