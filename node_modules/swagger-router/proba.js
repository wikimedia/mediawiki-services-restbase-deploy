#!/usr/bin/env node

"use strict";


var a = new Buffer('');
console.log(Array.isArray(a.toJSON()));

Process.exit( 0 );


var yaml = require('js-yaml');
var fs = require('fs');
var Router = require('./index');


function loadFullConf (confFile) {
    var conf = null;
    // try to load the conf
    try {
        conf = yaml.safeLoad(fs.readFileSync(confFile));
    } catch (e) {
        console.log('Could not load %s: %s', confFile, e);
        return null;
    };
    // go through the conf and recursively load any interface files
    var heap = [conf];
    while (heap.length) {
        var obj = heap.pop();
        if (Array.isArray(obj)) {
            heap = heap.concat(obj);
            continue;
        } else if (obj && obj.constructor !== Object) {
            continue;
        }
        Object.keys(obj).forEach( function (key) {
            if (key === 'interfaces') {
                var ifaces = obj.interfaces;
                // check that we have an array and that it contains
                // strings, which we suppose to be YAML file names
                if (Array.isArray(ifaces)) {
                    for (var idx = 0; idx < ifaces.length; idx++) {
                        if (typeof ifaces[idx] === 'string') {
                            if (ifaces[idx].search(/\.yaml$/) == -1) {
                                ifaces[idx] += '.yaml';
                            }
                            ifaces[idx] = loadFullConf('interfaces/' + ifaces[idx]);
                        }
                        if (ifaces[idx] && ifaces[idx].constructor === Object) {
                            heap.push(ifaces[idx]);
                        }
                    }
                } else if (ifaces && ifaces.constructor === Object) {
                    heap.push(ifaces);
                }
            } else if (obj[key] && obj[key].constructor === Object) {
                heap.push(obj[key]);
            }
        });
    }
    return conf;
}

//var conf = yaml.safeLoad(fs.readFileSync('config.example.yaml'));
var conf = loadFullConf('config.example.yaml');
console.log(Object.keys(conf.spec.paths['/{domain:en.wikipedia.org}']['x-restbase'].interfaces[0]['paths'] ));

var router = new Router.Router();
router.setTree( router.restBaseSpecToTree( conf.spec ) );


