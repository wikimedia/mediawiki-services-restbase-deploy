{
  "name": "swagger-router",
  "version": "0.2.9",
  "description": "An efficient swagger 2 based router with support for multiple APIs. For use in RESTBase.",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "coverage": "istanbul cover _mocha -- -R spec",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "bench": "node test/bench.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gwicke/swagger-router.git"
  },
  "keywords": [
    "swagger2",
    "router",
    "tree",
    "restbase"
  ],
  "author": {
    "name": "Gabriel Wicke",
    "email": "gwicke@wikimedia.org"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/gwicke/swagger-router/issues"
  },
  "dependencies": {
    "bluebird": "2.8.2",
    "core-js": "^1.2.6",
    "js-yaml": "^3.4.2",
    "tassembly": "^0.2.2",
    "template-expression-compiler": "^0.1.6"
  },
  "devDependencies": {
    "mocha": "^2.2.5",
    "mocha-jshint": "^2.2.3",
    "istanbul": "^0.3.15",
    "mocha-lcov-reporter": "^0.0.2",
    "coveralls": "^2.11.2",
    "mocha-jscs": "^1.2.0"
  },
  "readme": "# Swagger 2 router\n[![Build\nStatus](https://travis-ci.org/wikimedia/swagger-router.svg?branch=master)](https://travis-ci.org/wikimedia/swagger-router)\n\n## Features\n- `O(path element)` lookup complexity, monomorphic design with simple fast path.\n- Support for prefix-based 'mounting' of swagger specs. Example: Mount the\n    same spec fragments at `/en.wikipedia.org/v1/` and\n    `/de.wikipedia.org/v1/`.\n- Support for capture of fixed path segments. Example:\n    `/{domain:en.wikipedia.org}/v1/`. This feature is especially useful in\n    prefixes, as it enables the consistent construction of sensible params.\n- Support for static (purely spec-based) listings. Matching requests ending on\n    a slash are passed an array of matching child paths in the spec in the\n    `_ls` parameter.\n\n## Installation\n`npm install swagger-router`\n\n## Usage\n```javascript\nvar Router = require('swagger-router');\nvar router = new Router();\n\n// The main requirement is that each spec has a 'paths' member with some URL\n// patterns\nvar swaggerSpec = {\n    paths: {\n        '/': {\n            get: {\n                hello: 'A listing'\n            }\n        },\n        '/some/{name}': { // This object is returned as 'value'\n            get: {\n                hello: 'world'\n            }\n        }\n    }\n};\n\nrouter.addSpec(swaggerSpec);\n\n// Perform some lookups\nconsole.log(router.lookup('/some/title'));\n/* \n{\n    params: {\n        name: 'title'\n    },\n    value: { get: { hello: 'world' } }\n}\n*/\n\n// Use arrays internally for speed (no escaping / parsing)\nrouter.lookup(['some','path']);\n\n// Trailing slashes set an additional _ls param:\nrouter.lookup(['']); // equivalent: router.lookup('/'); \n/*\n{\n    params: {\n        _ls: ['some'],\n        name: 'title'\n    },\n    value: { get: { hello: 'A listing' } }\n}\n*/\n\n```\n## URI templating\n\nURIs are represented by `URI` class, which supports a limited set of features\nfrom [URI Template RFC 6570](http://tools.ietf.org/html/rfc6570). \n\n### Supported URI template expressions:\n- Simple string expression `{pattern}` - on expansion, looks up a variable named `pattern` in params\n  and substitutes its pct-encoded value. On matching, matches a single element in the path, and\n  sets `params.pattern` to the path element value. \n- Restricted expression `{+pattern}` - on expansion, works the same way as simple expression, but doesn't\n  pct-encode [reserved characters](http://tools.ietf.org/html/rfc3986#section-2.2) and ptc-triplets.\n  On matching, matches the whole subpath and writes it's value to `params.pattern` variable.\n- Optional expression `{/pattern}` - works the same way as simple expression, but on matching the path \n  element is optional.\n- Fixed expression `{pattern:value}` - on matching, matches only uris with path element equal to `value`,\n  and exports `value` as `params.pattern` variable. On expansion, substitutes `value`.\n\nThese features are optimised and available with `URI.expand(params)` method. Additional features\nare available with request templating.\n\n## Request templating\n\nModule exports an efficient templating library under `Template` class.\n\nExample usage:\n```javascript\nvar template = new Template({\n    method: 'put',\n    uri: '/{domain}/{$.request.headers.location}',\n    headers: '{$$.merge($.request.headers, {\"additional_name\": \"additional_value\"})}'\n    body: {\n        field_from_req_body: '{field_name}',\n        global_reference: '{$.request.headers.header_name}',\n        field_with_default_value: '{$$.default($.request.params.param_name, \"defaultValue\")}'       \n    }\n});\nvar request = template.expand({\n    request: req,\n    additional_context: context\n});\n```\n\nExpressions wrapped in curly braces are considered templates, which are resolved to values\non template expansion. In case some value cannot be resolved, template is expanded to `undefined`.\n\n`$` references global context (object, passed to the `expand` method). It can contain arbitrary number of objects,\nbut it must at least contain a `request` property with an original request. \n\nShort notations are supported, which are resolved to fields of a request part, for example, \n`'{field_name}'` in template `body` would be resolved to `'{$.request.body.field_name}'`. \nShort notations in `uri` would be resolved to `$.request.params`.\n\nBraced syntax is supported, so it's possible to write templates like `'{$.request.body[$.request.params.some_field]}'`.\n\nSeveral utility methods are supported:\n- `$$.default(template, defaultValue)` - if `template` is resolved, use it's value, otherwise use `defaultValue`.\n- `$$.merge(template1, template2)` - both templates should be evaluated to objects. The result is an object\n   with merged properties, but without overriding.\n- `$$.strip(object, properties)` - removes field names listed in `properties` array from an `object`. `properties`\n   could also be a string, if a single field should be removed.\n",
  "readmeFilename": "README.md",
  "_id": "swagger-router@0.2.9",
  "_shasum": "c87af0beb619367180c14f5bb7261994654d9e45",
  "_resolved": "git+https://github.com/gwicke/swagger-router.git#1fbd46256633311d06e9307a0eaccbe6d1c624d1",
  "_from": "swagger-router@git+https://github.com/gwicke/swagger-router.git#cleaner_expressions"
}
