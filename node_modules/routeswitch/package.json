{
  "name": "routeswitch",
  "version": "0.6.1",
  "description": "A fast regexp-based router. Supports Swagger 2 specs.",
  "main": "routeswitch.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gwicke/routeswitch.git"
  },
  "keywords": [
    "regexp",
    "switch",
    "router",
    "swagger",
    "swagger2"
  ],
  "dependencies": {
    "async": "~0.9.0",
    "es6-shim": "~0.13.0",
    "regexp-utils": "~0.3.0"
  },
  "devDependencies": {
    "mocha": "x.x.x",
    "mocha-jshint": "0.0.9"
  },
  "author": {
    "name": "Gabriel Wicke",
    "email": "gwicke@wikimedia.org"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gwicke/routeswitch/issues"
  },
  "readme": "# RouteSwitch\n\nSimple and fast regexp-based switcher on regexps or URL patterns. Supports\nbuilding a switcher from Swagger 2.0 API specs.\n\n[![Build\n-Status](https://travis-ci.org/wikimedia/routeswitch.svg?branch=master)](https://travis-ci.org/wikimedia/routeswitch)\n\n## Installation\n`npm install routeswitch`\n\n## Documentation\nPath specs are defined in a subset of [RFC\n6570](http://tools.ietf.org/html/rfc6570) URL patterns:\n\n- `/{foo}/{bar}` -- matches two non-empty path components\n- `/{foo}/{bar}/` -- only matches with trailing slash\n- `/foo{/bar}` -- optionally matches a slash and a path component, if not\n  empty\n- `/{+foo}` -- matches any non-empty path, including slashes\n\nIn the event of route overlaps, the most specific & shortest routes will win:\n\n1) regexps\n2) paths with fixed segments\n3) paths with templated segments\n\nExamples:\n- `/foo/{bar}` gets a higher precedence than `/{some}/{thing}` and `/{some}`\n\n### Construction\n#### `RouteSwitch.fromDirectory(path, [options]) -> Promise<RouteSwitch>`\nLoads all modules in a directory tree. Modules can either directly export a\nSwagger 2.0 spec with optional additional data (such as a reference to a\nhandler), or they can export a function returning a promise for the spec.\nReturns a promise for a RouteSwitch.\n\nBy default, RouteSwitch loads each handler by passing its path to `require()`.\nThis can be overridden by providing a custom loader, implemented as a function\nthat takes a path and returns a *spec fragment*, and included in the optional\n`options` object under the `loader` key:\n\n```javascript\nRouteSwitch.fromDirectory(path, { loader: myLoaderFn })\n```\n\n#### `RouteSwitch.fromHandlers(specs) -> RouteSwitch`\nBuilds a RouteSwitch directly from an array of spec fragments.\n\n#### `new RouteSwitch(routes) -> RouteSwitch`\nLow-level construction. Routes are objects with the following members:\n\n- `pattern`: either a `RegExp`, or a URL pattern\n- `methods`: an arbitrary object, which will be returned as a member on\n  successful `.match(uri)`. Typically this is the object providing the method\n  handlers for the route defined by `pattern`.\n\n### Dynamic route addition / removal\n#### `RouteSwitch.addRoute(route)`\nAdd a route to a RouteSwitch instance.\n\n#### `RouteSwitch.removeRoute(route)`\nRemove a route from a RouteSwitch instance.\n\n### Matching\n#### `RouteSwitch.match(uri) -> (null | object)`\nReturns null when there is no match. On match, it returns an object containing\n\n- `pattern`: the matched URL pattern\n- `methods`: the original Swagger spec object defined for this pattern,\n  keyed on method (lowercase)\n- `params`: Named parameters defined in the URL pattern\n\n### Example spec fragment\n```javascript\n{\n    paths: {\n        '/v1/{domain}': {\n            put: {\n                summary: \"Create or update a domain\",\n                // optionally, more swagger docs optionally\n                request_handler: this.putDomain.bind(this)\n            }\n        },\n        '/v1/{domain}/': {\n            get: {\n                summary: \"List buckets and tables for a domain\",\n                request_handler: this.listBuckets.bind(this)\n            }\n        },\n        '/v1/{domain}/{bucket}': {\n            put: {\n                summary: \"Create or update a bucket\",\n                request_handler: this.putBucket.bind(this)\n            },\n            get: {\n                summary: \"Get bucket metadata\",\n                request_handler: this.getBucket.bind(this)\n            }\n        },\n        '/v1/{domain}/{bucket}/': {\n            get: {\n                request_handler: this.handleAll.bind(this)\n            }\n        },\n        '/v1/{domain}/{bucket}/{+rest}': {\n            all: {\n                request_handler: this.handleAll.bind(this)\n            }\n        }\n    }\n};\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "c34d70518f5275ed60e66ccacb0b9be0ef09fe91",
  "_id": "routeswitch@0.6.1",
  "_shasum": "814dfd9e26b791bbd054b29cdb77acd291bb7147",
  "_from": "routeswitch@~0.6.1"
}
