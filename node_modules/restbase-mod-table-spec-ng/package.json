{
  "_args": [
    [
      {
        "raw": "restbase-mod-table-spec-ng@git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
        "scope": null,
        "escapedName": "restbase-mod-table-spec-ng",
        "name": "restbase-mod-table-spec-ng",
        "rawSpec": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
        "spec": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:wikimedia/restbase-mod-table-spec.git#redesign",
          "sshUrl": "git+ssh://git@github.com/wikimedia/restbase-mod-table-spec.git#redesign",
          "httpsUrl": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
          "gitUrl": "git://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
          "shortcut": "github:wikimedia/restbase-mod-table-spec#redesign",
          "directUrl": "https://raw.githubusercontent.com/wikimedia/restbase-mod-table-spec/redesign/package.json"
        }
      },
      "/opt/service/node_modules/restbase-mod-table-cassandra-ng"
    ]
  ],
  "_from": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
  "_id": "restbase-mod-table-spec-ng@0.2.0",
  "_inCache": true,
  "_location": "/restbase-mod-table-spec-ng",
  "_phantomChildren": {},
  "_requested": {
    "raw": "restbase-mod-table-spec-ng@git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
    "scope": null,
    "escapedName": "restbase-mod-table-spec-ng",
    "name": "restbase-mod-table-spec-ng",
    "rawSpec": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
    "spec": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:wikimedia/restbase-mod-table-spec.git#redesign",
      "sshUrl": "git+ssh://git@github.com/wikimedia/restbase-mod-table-spec.git#redesign",
      "httpsUrl": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
      "gitUrl": "git://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
      "shortcut": "github:wikimedia/restbase-mod-table-spec#redesign",
      "directUrl": "https://raw.githubusercontent.com/wikimedia/restbase-mod-table-spec/redesign/package.json"
    }
  },
  "_requiredBy": [
    "/restbase-mod-table-cassandra-ng"
  ],
  "_resolved": "git+https://github.com/wikimedia/restbase-mod-table-spec.git#e1aab7d9cff6b687194c7d4c1860639c6714212c",
  "_shasum": "51428e1a2068ca0277a8d0cb2f7c2c9723270ef0",
  "_shrinkwrap": null,
  "_spec": "restbase-mod-table-spec-ng@git+https://github.com/wikimedia/restbase-mod-table-spec.git#redesign",
  "_where": "/opt/service/node_modules/restbase-mod-table-cassandra-ng",
  "author": {
    "name": "Wikimedia Service Team",
    "email": "services@wikimedia.org"
  },
  "bugs": {
    "url": "https://phabricator.wikimedia.org/tag/restbase/"
  },
  "dependencies": {
    "cassandra-uuid": "^0.0.2",
    "core-js": "^2.0.3",
    "js-yaml": "^3.5.2",
    "routeswitch": "~0.6.3"
  },
  "description": "Tests and specification for RESTBase backend modules",
  "devDependencies": {
    "bluebird": "~3.3.3",
    "coveralls": "2.11.8",
    "extend": "^3.0.0",
    "istanbul": "0.4.2",
    "mocha": "2.4.5",
    "mocha-jshint": "2.3.1",
    "mocha-lcov-reporter": "1.2.0"
  },
  "gitHead": "e1aab7d9cff6b687194c7d4c1860639c6714212c",
  "homepage": "https://github.com/wikimedia/restbase-mod-table-spec",
  "keywords": [
    "restbase",
    "REST",
    "API",
    "routing",
    "orchestration",
    "storage",
    "buckets",
    "tables",
    "queues",
    "cassandra"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "restbase-mod-table-spec-ng",
  "optionalDependencies": {},
  "readme": "restbase-mod-table-spec\n=======================\n\n[RESTBase](https://github.com/wikimedia/restbase) is a caching / storing API\nproxy.\n\nThis module contains the shared table storage specification, and provides\nfunctional tests against this spec. Those tests are executed against the\n[Cassandra](https://github.com/wikimedia/restbase-mod-table-cassandra) and\n[SQLite](https://github.com/wikimedia/restbase-mod-table-sqlite) backends.\n\n# JSON table schema example\n\nExample:\n```javascript\n{\n    table: 'example',\n    // Attributes are typed key-value pairs\n    attributes: {\n        name: 'string',\n        property: 'string',\n        tid: 'timeuuid',\n        length: 'int',\n        value: 'string'\n    },\n    // Primary index structure: The order of index components matters. Simple\n    // single-level range queries are supported below the hash key level.\n    index: [\n        { type: 'hash', attribute: 'name' },\n        { type: 'range', order: 'asc', attribute: 'property' },\n        { type: 'range', order: 'desc', attribute: 'tid' }\n    },\n    // Optional secondary indexes on the attributes\n    secondaryIndexes: {\n        by_tid: {\n            { type: 'hash', attribute: 'tid' },\n            // Primary key attributes are included implicitly\n            // Project some additional attributes into the secondary index\n            { type: 'proj', attribute: 'length' }\n        }\n    }\n}\n```\n\n## Supported types\n- `blob`: arbitrary-sized blob; in practice, should be single-digit MB at most\n  (at least for Cassandra backend)\n- `set<T>`: A set of type T.\n- `int`: A 32-bit signed integer.\n- `varint`: A variable-length (arbitrary range) integer. Backends support at\n  least a 64 bit signed integer. Note that there might be further limitations\n  in client platforms; for example, Javascript can only represent 52bits at\n  full integer precision in its Number type. Since our server-side\n  implementation decodes JSON to doubles, this is also the maximum range the\n  we currently support in practice. We might add support for an alternative\n  JSON string representation of larger integers in the future.\n- `long`: A 64-bit signed long. Javascript only represents 52 bits in its `Number`\n   type, so longs should be represented as strings in clients.\n- `decimal`: Decimal number.\n- `float`: Single-precision (32-bit) floating point number.\n- `double`: Double-precision (64-bit) floating point number.\n- `boolean`: A boolean.\n- `string`: An UTF8 string.\n- `timeuuid`: A [version 1 UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_.28MAC_address_.26_date-time.29) as a string. Sorted by timestamp.\n- `uuid`: A [version 4 UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29) as a string.\n- `timestamp`: [ISO 8601 timestamp](https://en.wikipedia.org/wiki/ISO_8601) as\n  a string.\n- `json`: A JSON sub-object (as an embedded object, not a string), which is transparently parsed back to JSON.\n\n## Secondary index consistency\nQueries on secondary indexes are eventually consistent by default. While new\nentries are inserted along with the data, it is possible that *false\npositives* are returned for a short time after the primary request was\nacknowledged. We will also support optional strongly consistent secondary\nindex requests at the cost of cross-checking the index match with the actual\ndata, at least on some backends.\n\n## Custom TTL\nA custom TTL can be set for individual objects on `PUT` requests by providing a special\n`_ttl` integer attribute. Its value indicates the amount of time (in seconds) after which\nthe record will be removed from storage.\n\nTo select a TTL of a row, provide `withTTL: true` key in the query.\n \n# Options\n\nThe `option` attribute can be used to tune the storage behavior. Example:\n\n```javascript\noptions: {\n  // Indicate a preference of compression algorithms and parameters, most\n  // preferred first.\n  compression: [{\n    algorithm: 'snappy', // 'lz4' (default), 'deflate', 'snappy'\n    block_size: 1024, // powers of two 64 .. 1024\n  }],\n  // Describe the primary update behavior, to allow backends to tune\n  // parameters. In Cassandra, this affects the compaction strategy.\n  updates: {\n    pattern: 'timeseries' // or: 'write-once', 'random-update' (default)\n  }\n}\n```\n\n## Update patterns: `updates`\n\n- `random-update` (default): Robust support for random writes, updates and deletions,\n    but might not perform as well as some of the other options.\n- `write-once`: Most data is only written once, and there are few deletions.\n- `timeseries`: Write order correlates strongly with range index order. A\n    typical use case would be timeseries data, with a timestamp or revision id\n    as the first range index element.\n\n# Queries\nSelect the first 50 entries:\n\n```javascript\n{\n    table: 'example',\n    limit: 50\n}\n```\n\nLimit the query to 'Tom':\n```javascript\n{\n    table: 'example',\n    attributes: {\n        name: 'Tom'\n    },\n    limit: 50\n}\n```\n\nLimit the query to 'Tom', and select properties that are greater than 'a', and\nsmaller or equal to 'c'. Also, only select the 'value' column:\n```javascript\n{\n    table: 'example',\n    attributes: {\n        name: 'Tom',\n        property: {\n            gt: 'a',\n            le: 'c'\n        }\n    },\n    // Only select the 'value' column\n    proj: ['value']\n    limit: 50\n}\n```\n\nNow, descend down the primary index tree one level further & perform a\nrange query on the `tid` key:\n```javascript\n{\n    table: 'example',\n    attributes: {\n        name: 'Tom',\n        property: 'foo', // Note: needs to be fixed\n        tid: {\n            le: '30b68d20-6ba1-11e4-b3d9-550dc866dac4'\n        }\n    },\n    limit: 50\n}\n```\n\nFinally, perform an index on the `by_tid` secondary index:\n```javascript\n{\n    table: 'example',\n    index: 'by_tid',\n    attributes: {\n        tid: '30b68d20-6ba1-11e4-b3d9-550dc866dac4'\n    },\n    limit: 50\n}\n```\n\nAs you can see, these queries always select a contiguous slice of indexed\ndata, which is fairly efficient. The downside is that you can only query what\nyou indexed for.\n\n\n## API alternative to consider: REST URLs for GET queries\nDue to the tree structure of primary & secondary indexes, simple prefix\nequality or range queries pretty naturally map to URLs like\n`/example/Tom/foo`, or `/example//by_id/30b68d20-6ba1-11e4-b3d9-550dc866dac4`\nfor a secondary index query (note the `//` separator). More complex queries\ncould be supported with query string syntax like\n`/example/Tom/foo/?le=30b68d20-6ba1-11e4-b3d9-550dc866dac4&limit=50`.\n\nThe current implementation uses the JSON syntax described above exclusively\n(as GET or POST requests with a body), but for external APIs the URL-based API\nlooks very promising. This is not yet implemented, and needs more thinking\nthough of all the details before we expose a path-based API externally.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wikimedia/restbase-mod-table-spec.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha ./test/lib/ -- -R spec",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test": "mocha ./test/lib/"
  },
  "version": "0.2.0"
}
