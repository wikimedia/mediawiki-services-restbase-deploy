# Number of worker processes to spawn.
# Set to 0 to run everything in a single process without clustering.
# Use 'ncpu' to run as many workers as there are CPU units
num_workers: ncpu

# Number of workers to start in parallel after the first worker.
# The first worker is always started independently. After it has completed
# its start-up, this number controls the number of workers to start in
# parallel until `num_workers` have been started. Note that setting this
# number to a too high a value might lead to high resource consumption
# (especially of CPU) during the start-up process.
startup_concurrency: 8

# Log error messages and gracefully restart a worker if v8 reports that it
# uses more heap (note: not RSS) than this many mb.
worker_heap_limit_mb: 700

# The maximum interval in ms that can pass between two beat messages
# sent by each worker to the master before it is killed.
worker_heartbeat_timeout: 7500

# Tell service-runner where the root dir of the service is
app_base_path: /srv/deployment/restbase/deploy/restbase

# Logger info
logging:
  level: warn
  name: <%= log_name %>
  streams:
<%- if env == 'production' %>
    - host: <%= logstash_host %>
      port: <%= logstash_port %>
      type: gelf
<%- endif %>
    - path: <%= log_file %>
      type: file
<%- if env == 'beta' %>
    - type: syslog
      host: localhost
      port: <%= rsyslog_port %>
      prefix: '@cee: '
      name: node
<%- endif %>
  sampled_levels:
    # Target is about 1 request logged per minute @1000 req/s
    debug/request: 0.00005
    # Not sure what the rate of these is, so start conservatively.
    debug/request/slow: 0.001
    debug/noindex: 0.01
    debug/api_error: 0.01

# Statsd metrics reporter
metrics:
  name: <%= metrics_name %>
  host: <%= metrics_host %>
  port: <%= metrics_port %>
  type: statsd
  batch: true

<%- if rl_seeds|length > 0 %>
ratelimiter:
  type: kademlia
  listen:
    address: <%= ipaddress %>
    port: 3050
  seeds: ['<%= rl_seeds|join("','") %>']
<%- endif %>

# load & parametrise project templates. These are referenced / shared
# between domains in the root_spec further down.
default_project: &default_project
  x-modules:
    - path: projects/wmf_default.yaml
      options: &default_options
        table:
          backend: cassandra
          hosts: ['<%= seeds_ng|join("','") if seeds_ng|length > 0 else seeds|join("','") %>']
          keyspace: system
          localDc: <%= cassandra_local_dc %>
          datacenters: ['<%= cassandra_datacenters|join("','") %>']
          username: <%= cassandra_user %>
          password: <%= cassandra_password %>
          defaultConsistency: <%= cassandra_default_consistency %>
          skip_schema_update: true
          <% if cassandra_tls is not none and cassandra_tls|length > 0 %>tls:<% for key, value in cassandra_tls.iteritems() %>
            <%= key %>: <%= value -%>
<% endfor -%>
<% endif %>
          storage_groups:
          <%- for group in storage_groups_ng %>
            - name: <%= group.name %>
              domains: <%= group.domains %>
          <%- endfor %>
            # Catch-all group
            - name: others
              domains: /./
        parsoid:
          host: <%= parsoid_uri %>
          grace_ttl: 86400
          delete_probability: <%= delete_probability %>
        action:
          apiUriTemplate: <%= mwapi_uri %>
          baseUriTemplate: "{{'https://{domain}/api/rest_v1'}}"
        graphoid:
          host: <%= graphoid_uri %>
        mathoid:
          host: <%= mathoid_uri %>
          # 10 days Varnish caching, one day client-side
          cache-control: s-maxage=864000, max-age=86400
        mobileapps:
          host: <%= mobileapps_uri %>
          storage: new
        citoid:
          host: <%= citoid_uri %>
        recommendation:
          host: <%= recommendation_uri %>
        events:
          uri: <%= eventlogging_service_uri %>
          topic: resource_change
          transcludes_topic: change-prop.transcludes.resource-change
        summary:
          host: <%= mobileapps_uri %>
          implementation: <%= summary_impl %>
          protocol: https
        related:
          cache_control: s-maxage=86400, max-age=3600
        # Cache headers for purged end points.
        purged_cache_control: s-maxage=1209600, max-age=0, must-revalidate
        # Cache control for purged endpoints allowing short-term client caching
        purged_cache_control_client_cache: s-maxage=1209600, max-age=300
        skip_updates: <%= 'true' if skip_updates else 'false' %>
        pdf:
          cache_control: s-maxage=600, max-age=600
          uri: <%= pdfrender_uri %>
          new_uri: <%= proton_uri %>
          new_probability: <%= proton_probability %>
          secret: <%= pdfrender_key %>
        transform:
          cx_host: <%= cxserver_uri %>

# A separate project for wikipedias because they have more features
wikipedia.org: &wikipedia.org
  x-modules:
    - path: projects/wmf_wikipedia.yaml
      options: *default_options

# A separate project for en.wikipedia because it is even more feature-rich
en.wikipedia.org: &en.wikipedia.org
  x-modules:
    - path: projects/wmf_enwiki.yaml
      options: *default_options

# A different project template, sharing configuration options.
wikimedia.org: &wikimedia.org
  x-modules:
    - path: projects/wikimedia.org.yaml
      options:
          <<: *default_options
          pageviews:
            host: <%= aqs_uri %>

# A different project for wikidata since we have limited RESTBase support there.
wikidata.org: &wikidata.org
  x-modules:
    - path: projects/wmf_wikidata.yaml
      options: *default_options

# wiktionaries config
wiktionary: &wiktionary_project
  x-modules:
    - path: projects/wmf_wiktionary.yaml
      options: *default_options

# wikivoyage config
wikivoyage: &wikivoyage_project
  x-modules:
     - path: projects/wmf_wikivoyage.yaml
       options: *default_options

# Swagger spec root.
root_spec: &root_spec
  title: "The RESTBase root"
  # Some more general RESTBase info
  x-request-filters:
    - path: lib/security_response_header_filter.js
  x-sub-request-filters:
    - type: default
      name: http
      options:
        allow:
          - pattern: <%= mwapi_uri %>
            forward_headers: true
          - pattern: <%= parsoid_uri %>
            forward_headers: true
          - pattern: <%= aqs_uri %>
            forward_headers:
                x-client-ip: true
                user-agent: true
          - pattern: /^https?:\/\//
  paths:
  <%- for block, bdomains in domains.iteritems() %>

    # <%= block %>
    <%- for domain, project in bdomains.iteritems() %>
    /{domain:<%= domain %>}: *<%= project -%>
    <% endfor %>
  <%- endfor %>

    # global domain
    /{domain:wikimedia.org}: *wikimedia.org

    # A robots.txt to make sure that the content isn't indexed.
    /robots.txt:
      get:
        x-request-handler:
          - static:
              return:
                status: 200
                headers:
                  content-type: text/plain
                body: |
                  User-agent: *
                  Allow: /*/v1/?doc
                  Disallow: /

services:
  - name: <%= log_name %>
    module: hyperswitch
    conf:
      port: <%= port %>
      spec: *root_spec
      salt: <%= salt_key %>
      default_page_size: <%= page_size %>
      user_agent: <%= user_agent %>
      ui_name: REST API
      ui_url: https://www.mediawiki.org/wiki/RESTBase
      ui_title: REST API Documentation
